package com.appspiriment.composeutils.theme

import androidx.compose.runtime.Composable
import androidx.compose.runtime.ReadOnlyComposable
import androidx.compose.runtime.staticCompositionLocalOf
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.colorResource
import com.appspiriment.composeutils.R
import com.appspiriment.composeutils.wrappers.UiColor
import com.appspiriment.composeutils.wrappers.uiColorResource

data class BaseColors(
    val primary: Color = Color.Unspecified,
    val onPrimary : Color = Color.Unspecified,
    val secondary : Color = Color.Unspecified,
    val onSecondary : Color = Color.Unspecified,
    val tertiary : Color = Color.Unspecified,
    val onTertiary : Color = Color.Unspecified,
    val iconTint: Color = Color.Unspecified,
    val disabledIconTint: Color = Color.Unspecified,
    val drawerItem: Color = Color.Unspecified,
    val scrimColor : Color = Color.Unspecified,
    val navigationBarColor : Color = Color.Unspecified,
    val mainSurface : Color = Color.Unspecified,
    val onMainSurface : Color = Color.Unspecified,
    val secondarySurface : Color = Color.Unspecified,
    val onSecondarySurface : Color = Color.Unspecified,
    val background : Color = Color.Unspecified,
    val onBackground : Color = Color.Unspecified,
    val primaryCardContainer : Color = Color.Unspecified,
    val onPrimaryCardContainer : Color = Color.Unspecified,
    val onPrimaryCardContainerDimmed : Color = Color.Unspecified,
    val secondaryCardContainer : Color = Color.Unspecified,
    val onSecondaryCardContainer : Color = Color.Unspecified,
    val tertiaryCardContainer : Color = Color.Unspecified,
    val onTertiaryCardContainer : Color = Color.Unspecified,
    val greyCardContainer : Color = Color.Unspecified,
    val onGreyCardContainer : Color = Color.Unspecified,
    val error : Color = Color.Unspecified,
    val onError: Color = Color.Unspecified,
    val errorCardContainer : Color = Color.Unspecified,
    val onErrorCardContainer : Color = Color.Unspecified,
    val accentedBlueTitle : Color = Color.Unspecified,
    val accentedBlackTitle : Color = Color.Unspecified,
    val accentedRedTitle : Color = Color.Unspecified,
    val accentedBlueText : Color = Color.Unspecified,
    val accentedRedText : Color = Color.Unspecified,
    val accentedGoldText : Color = Color.Unspecified,
    val topAppBar : Color = Color.Unspecified,
    val onTopAppBar : Color = Color.Unspecified,
    val disabledText : Color = Color.Unspecified,
    val subText : Color = Color.Unspecified,
    val hintText : Color = Color.Unspecified,
    val dividerColor : Color = Color.Unspecified,
)
data class BaseUiColors(
    val primary: UiColor = UiColor.DynamicColor.Unspecified,
    val onPrimary : UiColor = UiColor.DynamicColor.Unspecified,
    val secondary : UiColor = UiColor.DynamicColor.Unspecified,
    val onSecondary : UiColor = UiColor.DynamicColor.Unspecified,
    val tertiary : UiColor = UiColor.DynamicColor.Unspecified,
    val onTertiary : UiColor = UiColor.DynamicColor.Unspecified,
    val iconTint: UiColor = UiColor.DynamicColor.Unspecified,
    val disabledIconTint: UiColor = UiColor.DynamicColor.Unspecified,
    val drawerItem: UiColor = UiColor.DynamicColor.Unspecified,
    val scrimColor : UiColor = UiColor.DynamicColor.Unspecified,
    val navigationBarColor : UiColor = UiColor.DynamicColor.Unspecified,
    val mainSurface : UiColor = UiColor.DynamicColor.Unspecified,
    val onMainSurface : UiColor = UiColor.DynamicColor.Unspecified,
    val secondarySurface : UiColor = UiColor.DynamicColor.Unspecified,
    val onSecondarySurface : UiColor = UiColor.DynamicColor.Unspecified,
    val background : UiColor = UiColor.DynamicColor.Unspecified,
    val onBackground : UiColor = UiColor.DynamicColor.Unspecified,
    val primaryCardContainer : UiColor = UiColor.DynamicColor.Unspecified,
    val onPrimaryCardContainer : UiColor = UiColor.DynamicColor.Unspecified,
    val onPrimaryCardContainerDimmed : UiColor = UiColor.DynamicColor.Unspecified,
    val secondaryCardContainer : UiColor = UiColor.DynamicColor.Unspecified,
    val onSecondaryCardContainer : UiColor = UiColor.DynamicColor.Unspecified,
    val tertiaryCardContainer : UiColor = UiColor.DynamicColor.Unspecified,
    val onTertiaryCardContainer : UiColor = UiColor.DynamicColor.Unspecified,
    val greyCardContainer : UiColor = UiColor.DynamicColor.Unspecified,
    val onGreyCardContainer : UiColor = UiColor.DynamicColor.Unspecified,
    val error : UiColor = UiColor.DynamicColor.Unspecified,
    val onError: UiColor = UiColor.DynamicColor.Unspecified,
    val errorCardContainer : UiColor = UiColor.DynamicColor.Unspecified,
    val onErrorCardContainer : UiColor = UiColor.DynamicColor.Unspecified,
    val accentedBlueTitle : UiColor = UiColor.DynamicColor.Unspecified,
    val accentedBlackTitle : UiColor = UiColor.DynamicColor.Unspecified,
    val accentedRedTitle : UiColor = UiColor.DynamicColor.Unspecified,
    val accentedBlueText : UiColor = UiColor.DynamicColor.Unspecified,
    val accentedRedText : UiColor = UiColor.DynamicColor.Unspecified,
    val accentedGoldText : UiColor = UiColor.DynamicColor.Unspecified,
    val topAppBar : UiColor = UiColor.DynamicColor.Unspecified,
    val onTopAppBar : UiColor = UiColor.DynamicColor.Unspecified,
    val disabledText : UiColor = UiColor.DynamicColor.Unspecified,
    val subText : UiColor = UiColor.DynamicColor.Unspecified,
    val hintText : UiColor = UiColor.DynamicColor.Unspecified,
    val dividerColor : UiColor = UiColor.DynamicColor.Unspecified,
)

// Light color scheme object
@Composable
fun baseColors() = BaseColors(
    primary = colorResource(id = R.color.primary),
    onPrimary = colorResource(id = R.color.onPrimary),
    secondary = colorResource(id = R.color.secondary),
    onSecondary = colorResource(id = R.color.onSecondary),
    tertiary = colorResource(id = R.color.tertiary),
    onTertiary = colorResource(id = R.color.onTertiary),
    scrimColor = colorResource(id = R.color.scrim),
    iconTint = colorResource(id = R.color.iconTint),
    disabledIconTint = colorResource(id = R.color.disabledIconTint),
    drawerItem = colorResource(id = R.color.drawerItem),
    navigationBarColor = colorResource(id = R.color.navigationBar),
    mainSurface = colorResource(id = R.color.mainSurface),
    onMainSurface = colorResource(id = R.color.onMainSurface),
    secondarySurface = colorResource(id = R.color.secondarySurface),
    onSecondarySurface = colorResource(id = R.color.onSecondarySurface),
    background = colorResource(id = R.color.background),
    onBackground = colorResource(id = R.color.onBackground),
    primaryCardContainer = colorResource(id = R.color.primaryCardContainer),
    onPrimaryCardContainer = colorResource(id = R.color.onPrimaryCardContainer),
    onPrimaryCardContainerDimmed = colorResource(id = R.color.onPrimaryCardContainerDimmed),
    secondaryCardContainer = colorResource(id = R.color.secondaryCardContainer),
    onSecondaryCardContainer = colorResource(id = R.color.onSecondaryCardContainer),
    tertiaryCardContainer = colorResource(id = R.color.tertiaryCardContainer),
    onTertiaryCardContainer = colorResource(id = R.color.onTertiaryCardContainer),
    greyCardContainer = colorResource(id = R.color.greyCardContainer),
    onGreyCardContainer = colorResource(id = R.color.onGreyCardContainer),
    error = colorResource(id = R.color.error),
    onError = colorResource(id = R.color.onError),
    errorCardContainer = colorResource(id = R.color.errorCardContainer),
    onErrorCardContainer = colorResource(id = R.color.onErrorCardContainer),
    accentedBlueTitle = colorResource(id = R.color.accentedBlueTitle),
    accentedBlackTitle = colorResource(id = R.color.accentedBlackTitle),
    accentedRedTitle = colorResource(id = R.color.accentedRedTitle),
    accentedBlueText = colorResource(id = R.color.accentedBlueText),
    accentedRedText = colorResource(id = R.color.accentedRedText),
    accentedGoldText = colorResource(id = R.color.accentedGoldText),
    topAppBar = colorResource(id = R.color.topAppBar),
    onTopAppBar = colorResource(id = R.color.onTopAppBar),
    disabledText = colorResource(id = R.color.disabledText),
    subText = colorResource(id = R.color.subText),
    hintText = colorResource(id = R.color.hintText),
    dividerColor = colorResource(id = R.color.dividerColor)
)

// Light color scheme object
@Composable
fun baseUiColors() = BaseUiColors(
    primary = uiColorResource(id = R.color.primary),
    onPrimary = uiColorResource(id = R.color.onPrimary),
    secondary = uiColorResource(id = R.color.secondary),
    onSecondary = uiColorResource(id = R.color.onSecondary),
    tertiary = uiColorResource(id = R.color.tertiary),
    onTertiary = uiColorResource(id = R.color.onTertiary),
    scrimColor = uiColorResource(id = R.color.scrim),
    iconTint = uiColorResource(id = R.color.iconTint),
    disabledIconTint = uiColorResource(id = R.color.disabledIconTint),
    drawerItem = uiColorResource(id = R.color.drawerItem),
    navigationBarColor = uiColorResource(id = R.color.navigationBar),
    mainSurface = uiColorResource(id = R.color.mainSurface),
    onMainSurface = uiColorResource(id = R.color.onMainSurface),
    secondarySurface = uiColorResource(id = R.color.secondarySurface),
    onSecondarySurface = uiColorResource(id = R.color.onSecondarySurface),
    background = uiColorResource(id = R.color.background),
    onBackground = uiColorResource(id = R.color.onBackground),
    primaryCardContainer = uiColorResource(id = R.color.primaryCardContainer),
    onPrimaryCardContainer = uiColorResource(id = R.color.onPrimaryCardContainer),
    onPrimaryCardContainerDimmed = uiColorResource(id = R.color.onPrimaryCardContainerDimmed),
    secondaryCardContainer = uiColorResource(id = R.color.secondaryCardContainer),
    onSecondaryCardContainer = uiColorResource(id = R.color.onSecondaryCardContainer),
    tertiaryCardContainer = uiColorResource(id = R.color.tertiaryCardContainer),
    onTertiaryCardContainer = uiColorResource(id = R.color.onTertiaryCardContainer),
    greyCardContainer = uiColorResource(id = R.color.greyCardContainer),
    onGreyCardContainer = uiColorResource(id = R.color.onGreyCardContainer),
    errorCardContainer = uiColorResource(id = R.color.errorCardContainer),
    onErrorCardContainer = uiColorResource(id = R.color.onErrorCardContainer),
    accentedBlueTitle = uiColorResource(id = R.color.accentedBlueTitle),
    accentedBlackTitle = uiColorResource(id = R.color.accentedBlackTitle),
    accentedRedTitle = uiColorResource(id = R.color.accentedRedTitle),
    topAppBar = uiColorResource(id = R.color.topAppBar),
    onTopAppBar = uiColorResource(id = R.color.onTopAppBar),
    disabledText = uiColorResource(id = R.color.disabledText),
    subText = uiColorResource(id = R.color.subText),
    hintText = uiColorResource(id = R.color.hintText),
    accentedBlueText = uiColorResource(id = R.color.accentedBlueText),
    accentedRedText = uiColorResource(id = R.color.accentedRedText),
    accentedGoldText = uiColorResource(id = R.color.accentedGoldText),
    error = uiColorResource(id = R.color.error),
    onError = uiColorResource(id = R.color.onError),
    dividerColor = uiColorResource(id = R.color.dividerColor)
)

val LocalColors = staticCompositionLocalOf { BaseColors() }
val LocalUiColors = staticCompositionLocalOf { BaseUiColors() }
